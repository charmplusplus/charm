module allGather
{
  include "vector";

  message allGatherMsg;

  group AllGather
  {
    entry AllGather(int size, int type, int seed);
    entry[reductiontarget] void startGather();
    entry void recvRing(int sender, CkNcpyBuffer data);
    entry[nokeep] void local_buff_done(CkDataMsg * m);
    entry void Hypercube()
    {
      for (iter = 0; iter < numHypercubeIter; iter++)
      {
        serial
        {
          if (HypercubeRecursiveDoubling)
            HypercubeToSend = (n + CkMyPe() - (int)pow(2, iter)) % n;
          else
            HypercubeToSend = CkMyPe() ^ ((int)pow(2, iter));
        }
        serial
        {
          if (HypercubeRecursiveDoubling && iter == numHypercubeIter - 1)
          {
            int size = n - (int)pow(2, iter);
            thisProxy[HypercubeToSend].recvHypercube(iter, hyperCubeStore.data(),
                                                     hyperCubeIndx.data(), size);
          }
          else
            thisProxy[HypercubeToSend].recvHypercube(
                iter, hyperCubeStore.data(), hyperCubeIndx.data(), hyperCubeStore.size());
        }
        when recvHypercube[iter](int ref, CkNcpyBuffer data[size], int dataIndx[size],
                                 int size)
        {
          serial
          {
            for (int m = 0; m < size; m++)
            {
              hyperCubeStore.emplace_back(data[m]);
              hyperCubeIndx.emplace_back(dataIndx[m]);
              CkNcpyBuffer dst(store + dataIndx[m] * k, k * sizeof(char),
                               zero_copy_callback, CK_BUFFER_REG);
              dst.get(data[m]);
            }
          }
        }
      }
    };
    entry void recvHypercube(int ref, CkNcpyBuffer data[size], int dataIndx[size],
                             int size);
    entry void Flood(int sender, CkNcpyBuffer data);
  };
};
