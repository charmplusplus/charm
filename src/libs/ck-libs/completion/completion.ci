module completion {
  //include "ckcallback.h";

  group CompletionDetector {
    entry CompletionDetector();
    // Call as a broadcast to the group

    // How many producer objects must signal completion, and who
    // should we tell when consumption matches production?
    entry void start_detection(int num_producers,
                               CkCallback start, CkCallback allProduced, CkCallback finish,
                               int prio_) {
      serial {
        CkAssert(!running);
        running = true;
        prio = prio_;
        producers_total = num_producers;
        if (!start.isInvalid())
          contribute(start);
      }

      while (producers_done_global < producers_total) {
        serial {
          contribute(sizeof(int), &producers_done_local, CkReduction::sum_int,
                     CkCallback(CkReductionTarget(CompletionDetector, producers_done),
                                thisgroup));
        }
        when producers_done(int producers_done_global_) serial {
          producers_done_global = producers_done_global_;
        }
      }

      serial {
        if (CkMyPe() == 0 && !allProduced.isInvalid())
          allProduced.send();
      }

      while (unconsumed > 0) {
        serial {
          int counts[2];
          counts[0] = produced; // Move up to first reduction loop
          counts[1] = consumed;
          contribute(2*sizeof(int), counts, CkReduction::sum_int,
                     CkCallback(CkReductionTarget(CompletionDetector, count_consumed),
                                thisgroup));
        }
        when count_consumed(int produced_global, int consumed_global) serial {
          unconsumed = produced_global - consumed_global;
        }
      }

      serial "completion finished" {
        init();
        CkAssert(!finish.isInvalid());
        contribute(finish);
      }
    };

    entry [reductiontarget] void producers_done(int producers_done_global_);
    entry [reductiontarget] void count_consumed(int produced_global, int consumed_global);
  };
};
