module CkLocation {
  extern module CkMarshall;

  message CkArrayElementMigrateMessage {
    char packData[];
  };

  group [migratable] CkLocCache {
    entry CkLocCache();
    entry [expedited] void requestLocation(CmiUInt8 id, int peToTell);
    entry [expedited] void updateLocation(const CkLocEntry& newEntry);
  };

  group [migratable] CkLocMgr {
    entry CkLocMgr(CkArrayOptions opts);
    entry [expedited] void immigrate(CkArrayElementMigrateMessage *msg);
    entry [expedited] void requestLocation(const CkArrayIndex& idx, int peToTell);
    entry [expedited] void updateLocation(const CkArrayIndex& idx, const CkLocEntry& e);
    entry void reclaimRemote(const CkArrayIndex& idx, int deletedOnPe);
  };
  
  // Array Map object support:
  group [migratable] CkArrayMap {
  };

  group [migratable] RRMap : CkArrayMap {
    entry RRMap(void);
  };

  readonly CkGroupID _defaultArrayMapID;
  readonly CkGroupID _fastArrayMapID;

  group [migratable] DefaultArrayMap : RRMap {
    entry DefaultArrayMap(void);
  };

  group [migratable] FastArrayMap : DefaultArrayMap {
    entry FastArrayMap(void);
  };

  group [migratable] HilbertArrayMap : DefaultArrayMap {
    entry HilbertArrayMap(void);
  };

  group [migratable] ReadFileMap : DefaultArrayMap {
    entry ReadFileMap(void);
  };

  group [migratable] Simple1DFileMap : DefaultArrayMap {
    entry Simple1DFileMap(void);
  };

  group [migratable] BlockMap : DefaultArrayMap {
    entry BlockMap(void);
  };

  group [migratable] CldMap : CkArrayMap {
    entry CldMap(void);
  };

  group [migratable] ConfigurableRRMap : RRMap {
    entry ConfigurableRRMap(void);
  };

  initproc void _initConfigurableRRMap(void);

  initnode void _propMapInit(void);
  initproc void _CkMigratable_initInfoInit(void);

  group [migratable] PropMap : CkArrayMap {
    entry PropMap(void);
  };

  mainchare CkMapsInit {
    entry CkMapsInit(CkArgMsg *m);
  };
};
