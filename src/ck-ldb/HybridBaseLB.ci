module HybridBaseLB {

extern module LBManager;
extern module BaseLB;

include "CentralLBMsg.h";
include "HybridLBMsg.h";

message DummyMsg;

initnode void lbinit(void);

group [migratable] HybridBaseLB: BaseLB {
  entry void HybridBaseLB(const CkLBOptions &);  
  entry void ProcessAtSync();
  entry void ReceiveStats(CkMarshalledCLBStatsMessage data, int level);
  entry [reductiontarget] void ResumeClients(double result);
  entry void ResumeClients(int balancing);
  entry void ReceiveMigration(LBMigrateMsg*);	
  entry void ReceiveVectorMigration(LBVectorMigrateMsg*);	
  entry void TotalObjMigrated(int count, int level);
  entry void ObjMigrated(LDObjData data, LDCommData cdata[n], int n, int level);
  entry void ObjsMigrated(std::vector<LDObjData>& data, int m, LDCommData cdata[n], int n, int level);
  entry void Loadbalancing(int level);	
  entry void NotifyObjectMigrationDone(int);	
  entry void StartCollectInfo(DummyMsg *);
  entry void CollectInfo(Location loc[n], int n, int fromlevel);	
  entry void PropagateInfo(Location loc[n], int n, int fromlevel);
  entry void reportLBQulity(double, double, double, int, double);
  entry void reportLBMem(double);
};

};
