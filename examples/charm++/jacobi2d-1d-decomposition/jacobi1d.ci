mainmodule jacobi1d {
  readonly CProxy_Main mainProxy;
  readonly int arrayDimX;
  readonly int arrayDimY;
  readonly int blockDimX;
  readonly int numChares;
  readonly int maxiterations;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry void done(int totalIter);
  };

  array [1D] Jacobi {
    entry Jacobi(void);
    entry void receiveGhosts(int iter, int dir, int size, double gh[size]);
    entry [reductiontarget] void recvConvergeResult(bool result);

    entry void run() {
      while (!converged && iterations<maxiterations) {
        serial "send_to_neighbors" {
          iterations++;
          if(!topBound)
            thisProxy((thisIndex-1+numChares)%numChares).receiveGhosts(iterations, BOTTOM, arrayDimY, temperature[1].data());
          if(!bottomBound)
            thisProxy((thisIndex+1)%numChares).receiveGhosts(iterations, TOP, arrayDimY, temperature[blockDimX].data());
        }
        for(imsg = 0; imsg < neighbors; imsg++)
          when receiveGhosts[iterations] (int iter, int dir, int size, double gh[size])
            serial "update_boundary" {
              int row = (dir == TOP) ? 0 : blockDimX+1;
              for(int j=0; j<size; j++)
                temperature[row][j] = gh[j];
            }
        serial "compute" { check_and_compute(); }
        serial "compute_converge" {
          bool conv = (max_error <= THRESHOLD);
          CkCallback cb(CkReductionTarget(Jacobi, recvConvergeResult), thisProxy);
          contribute(sizeof(bool), &conv, CkReduction::logical_and_bool, cb);
        }
        when recvConvergeResult(bool result) serial "check_converge"{
          converged = result;
        if ((result || iterations>=maxiterations) && thisIndex == 0) mainProxy.done(iterations);
      }
      }
    };
  };
};
