mainmodule random_amr {

  readonly CProxy_Main mainProxy;
  readonly CProxy_DgElement dgElementProxy;
  
  mainchare Main {
    entry Main(CkArgMsg* msg);
    entry void initialize();
    entry void create_new_elements();
    entry void adjust_domain();
    entry void delete_old_elements();
    entry void exit();
  };

  array [1D] DgElement {
    entry DgElement();
    entry void adjust_domain();
    entry void collect_data_from_children(
        std::deque<ElementId_t> sibling_ids_to_collect,
        std::array<ElementId_t, 2>& parent_neighbors);
    entry void create_new_elements(int iteration); 
    entry void delete_old_elements();
    entry void evaluate_refinement_criteria(int iteration);
    entry void initialize_child(const ElementId_t& nonsibling_neighbor_id);
    entry void initialize_initial_elements();
    entry void initialize_parent(std::array<ElementId_t, 2>& parent_neighbors);
    entry void send_data_to_children();
  };
};
