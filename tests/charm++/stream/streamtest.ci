mainmodule streamtest
{
	include "stream.h";
	mainchare Main {
		entry Main(CkArgMsg* m);
		entry void streamMade(Ck::Stream::StreamIdMessage* msg) {
			serial {
				size_t id = msg -> id;
				CkPrintf("Got the stream id: %d\n", id);
				// CkExit();
				producers = CProxy_Producers::ckNew(id, 10);
				consumers = CProxy_Consumers::ckNew(id, 2);
			}
		};

	};

	array[1D] Producers {
		entry Producers(StreamToken stream);
		entry [reductiontarget] void doneWriting();
	};

	array[1D] Consumers {
		entry Consumers(StreamToken stream);
		entry void recvData(Ck::Stream::StreamDeliveryMsg* msg){
			serial {
				size_t* data = (size_t*)(msg -> data);
				size_t num_ints = msg -> num_bytes / sizeof(size_t);
				_num_ints_received += num_ints;
				for(int i = 0; i < num_ints; ++i){
					CkPrintf("PE %d, Index: %d: Received: %d,", CkMyPe(), thisIndex, data[i]);
				}
				CkPrintf("\n");
				if(msg -> status == Ck::Stream::StreamStatus::STREAM_OK) {
					CkPrintf("issuing another get request on PE #%d, index %d...\n", CkMyPe(), thisIndex);
					Ck::Stream::get(_stream, sizeof(size_t), 1, CkCallback(CkIndex_Consumers::recvData(0), thisProxy[thisIndex]));
				} else {
					CkPrintf("Consumer %d has received the done signal and consumed %d size_t...\n", thisIndex, _num_ints_received);
					CkCallback cb = CkCallback(CkReductionTarget(Consumers, finishReading), thisProxy[0]);
					contribute(cb);
				}
			}
		};

		entry [reductiontarget] void finishReading() {
			serial {
				CkPrintf("All consumers done reading!\n");
				CkExit(0);
			}
		}
	}
}
