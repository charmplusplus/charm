Charmrun> scalable start enabled. 
Charmrun> started all node programs in 0.029 seconds.
Charm++> Running in non-SMP mode: 2 processes (PEs)
Converse/Charm++ Commit ID: v7.1.0-devel-356-g3a0281b7d
Isomalloc> Synchronized global address space.
Charm++> scheduler running in netpoll mode.
CharmLB> Load balancer assumes all CPUs are same.
Charm++> Running on 1 hosts (1 sockets x 8 cores x 1 PUs = 8-way SMP)
Charm++> cpu topology info is gathered in 0.000 seconds.
CharmLB> Load balancing instrumentation for communication is off.
We made it to the streamCreated part baby
Got the producer->middle stream id: 0
Created: 0 with total size 2
Created: 1 with total size 2
Created: 2 with total size 2
Created: 3 with total size 2
Created: 4 with total size 2
Debug: Put Buffer Print called on stream 0
WARNING: put buffer size is 0 but put buffer is not empty
Index 0: 0 of size 2, total size 50
Debug: Done printing put buffer
Producer 0 has written 5 records to the stream 0...
From PE[0], buffering a get request with 8 requested bytes...
From PE[0], buffering a get request with 8 requested bytes...
for the get record request, making the gr.requested_bytes=2
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=40
for the get record request, making the gr.requested_bytes=2
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=30
Middle 1, recvData invoked. msg->num_bytes=2
Middle received: 0 of length 1
for the get record request, making the gr.requested_bytes=2
Created: 5 with total size 2
Created: 6 with total size 2
Created: 7 with total size 2
Created: 8 with total size 2
Created: 9 with total size 2
Debug: Put Buffer Print called on stream 0
WARNING: put buffer size is 0 but put buffer is not empty
Index 0: 5 of size 2, total size 50
Debug: Done printing put buffer
Producer 1 has written 5 records to the stream 0...
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=20
Middle 0, recvData invoked. msg->num_bytes=2
Middle received: 1 of length 1
for the get record request, making the gr.requested_bytes=2
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=10
Middle 1, recvData invoked. msg->num_bytes=2
Middle received: 2 of length 1
for the get record request, making the gr.requested_bytes=2
From PE[1], buffering a get request with 8 requested bytes...
From PE[1], buffering a get request with 8 requested bytes...
PANIC: size_of_record.num_bytes_copied = 0, which != 8
for the get record request, making the gr.requested_bytes=0
From PE[1], on stream 0, num_bytes_copied=0, res -> num_bytes=0, _counter.receivedAllData()=1, _get_buffer_size=0
DEBUG: Printing Total Bytes Fulfilled of stream 0 on PE 1: 0
DEBUG: Printing Received Counter of stream 0 on PE 1
DEBUG: Done Printing Received Buffer
DEBUG: Printing Sent Counter of stream 0 on PE 1
s PE 1: 0
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=0
Producers are done, closing stream id 0. Sent 10 records.
Middle 0, recvData invoked. msg->num_bytes=2
Middle received: 3 of length 1
for the get record request, making the gr.requested_bytes=2
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=40
Middle 1, recvData invoked. msg->num_bytes=2
Middle received: 4 of length 1
s PE 0: 50
DEBUG: Done Printing Sent Buffer
PANIC: size_of_record.num_bytes_copied = 0, which != 8
for the get record request, making the gr.requested_bytes=0
From PE[1], on stream 0, num_bytes_copied=0, res -> num_bytes=0, _counter.receivedAllData()=1, _get_buffer_size=0
DEBUG: Printing Total Bytes Fulfilled of stream 0 on PE 1: 0
DEBUG: Printing Received Counter of stream 0 on PE 1
DEBUG: Done Printing Received Buffer
DEBUG: Printing Sent Counter of stream 0 on PE 1
s PE 1: 0
for the get record request, making the gr.requested_bytes=2
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=30
Middle 0, recvData invoked. msg->num_bytes=2
Middle received: 5 of length 1
for the get record request, making the gr.requested_bytes=2
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=20
Middle 1, recvData invoked. msg->num_bytes=2
Middle received: 6 of length 1
s PE 0: 50
DEBUG: Done Printing Sent Buffer
Middle 3, recvData invoked. msg->num_bytes=0
Middle 3 has received the done signal and consumed 0 bytes, made 1 getRecord invocations...
Middle 2, recvData invoked. msg->num_bytes=0
Middle 2 has received the done signal and consumed 0 bytes, made 1 getRecord invocations...
for the get record request, making the gr.requested_bytes=2
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=10
Middle 0, recvData invoked. msg->num_bytes=2
Middle received: 7 of length 1
for the get record request, making the gr.requested_bytes=2
From PE[0], on stream 0, num_bytes_copied=2, res -> num_bytes=2, _counter.receivedAllData()=0, _get_buffer_size=0
Middle 1, recvData invoked. msg->num_bytes=2
Middle received: 8 of length 1
From PE[0], buffering a get request with 8 requested bytes...
Middle 0, recvData invoked. msg->num_bytes=2
Middle received: 9 of length 1
From PE[0], buffering a get request with 8 requested bytes...
PANIC: size_of_record.num_bytes_copied = 0, which != 8
for the get record request, making the gr.requested_bytes=0
From PE[0], on stream 0, num_bytes_copied=0, res -> num_bytes=0, _counter.receivedAllData()=1, _get_buffer_size=0
DEBUG: Printing Total Bytes Fulfilled of stream 0 on PE 0: 120
DEBUG: Printing Received Counter of stream 0 on PE 0
r PE 1: 50
r PE 0: 50
DEBUG: Done Printing Received Buffer
DEBUG: Printing Sent Counter of stream 0 on PE 0
s PE 1: 0
s PE 0: 50
DEBUG: Done Printing Sent Buffer
PANIC: size_of_record.num_bytes_copied = 0, which != 8
for the get record request, making the gr.requested_bytes=0
From PE[0], on stream 0, num_bytes_copied=0, res -> num_bytes=0, _counter.receivedAllData()=1, _get_buffer_size=0
DEBUG: Printing Total Bytes Fulfilled of stream 0 on PE 0: 120
DEBUG: Printing Received Counter of stream 0 on PE 0
r PE 1: 50
r PE 0: 50
DEBUG: Done Printing Received Buffer
DEBUG: Printing Sent Counter of stream 0 on PE 0
s PE 1: 0
s PE 0: 50
DEBUG: Done Printing Sent Buffer
Middle 1, recvData invoked. msg->num_bytes=0
Middle 1 has received the done signal and consumed 10 bytes, made 6 getRecord invocations...
Middle 0, recvData invoked. msg->num_bytes=0
Middle 0 has received the done signal and consumed 10 bytes, made 6 getRecord invocations...
Middle is done: Processed 10 records
